'''
CRYPTOCODERS

this file creats all the tables that are used by the atm app for the databases

each class is the table, with fields being set within the class

follow the 'class digram pdf' to see a model view of the tables
'''

from datetime import datetime
from django.db import models



'''
CRYPTOCODERS

This is the account table
It holds the following:
	The name of the account holder
	The Account number, which serves as the primary key
	A phone number
	The balance tied to the card
'''
class Account_Extension(models.Model):
    class Meta:
        verbose_name = "Account"
        verbose_name_plural = "Accounts"
    name = models.CharField(max_length = 200)
    number = models.CharField(max_length = 12, primary_key = True, default = '0')
    phone_number = models.CharField(max_length = 12)
    balance = models.DecimalField(max_digits=20, decimal_places = 2)


    This is the toString method. This format is used for all classes
    '''
    def __str__(self):
        return self.number + " : " + self.name

'''
CRYPTOCODERS
ATM Class
Address field serves as the primary key.
This assumes only one ATM at a particular address
'''
class ATM(models.Model):
    class Meta:
        verbose_name = "ATM"
        verbose_name_plural = "ATMs"
    address = models.CharField(max_length = 200, default = '0', primary_key = True, unique = True)
    balance = models.DecimalField(max_digits = 20, decimal_places = 2, default = '0')


    def __str__(self):
        return "ATM at " + self.address



'''
CRYPTOCODERS
Add new ATM card class
Card number serves as the primary key for this table
This is because there should be only one card with a specific number
'''
class Add_New_ATM_Card(models.Model):
    class Meta:
        verbose_name = "New ATM card"
        verbose_name_plural = "New ATM card"
    card_number = models.CharField(max_length = 16, primary_key = True, default = '0')
    account_number = models.ForeignKey('Account_Extension', on_delete = models.CASCADE)
    pin = models.CharField(max_length = 4)
    account_name = models.CharField(max_length = 200)
    date_issued = models.DateField(null = True)
    expiry_date = models.DateField(null = True)
    address = models.CharField(max_length = 200, default = "")
    balance = models.CharField(max_length = 20, default = '0')
    phone_number = models.CharField(max_length = 10, default = "")

    CARD_STATUS_CHOICES = [("Active", "Active"), ("Inactive", "Inactive")]
    card_status = models.CharField(max_length = 10, default = "Inactive", choices = CARD_STATUS_CHOICES)

    twof_status_choices = [ ("Active","Active") , ("Inactive","Inactive") ]
    two_factor_status = models.CharField(max_length = 10, default = "Inactive", choices = twof_status_choices)

    def __str__(self):
	    return self.card_number + ": " + self.account_name



'''
CRYPTOCODERS
View ATM status
The primary key is the ATM address, which is also a
foreign key from the ATM table.
This ensures that only one status object exists
for each ATM in the system.
'''
class View_ATM_Status(models.Model):
    class Meta:
        verbose_name = "View ATM Status"
        verbose_name_plural = "View ATM Status"
    ATM_STATUS_CHOICES = [("Active","Active"), ("Down","Down")]
    ATM_address = models.ForeignKey('ATM', on_delete = models.CASCADE, primary_key = True)
    ATM_status = models.CharField(max_length = 10, choices = ATM_STATUS_CHOICES, default = "Down")
    last_refill = models.DateTimeField(default = datetime.now)
    next_refill = models.DateField(default = datetime.now)
    balance = models.DecimalField( max_digits = 20, decimal_places = 2)

    def __str__(self):
        return str(self.ATM_address) + " | Status: " + self.ATM_status + " | Next refill: " + str(self.next_refill)



'''
CRYPTOCODERS
ATM refill
Primary key is a unique id generated by the database.
This will be used to refill ATMs and provide historical
data for refills
'''
class ATM_Refill(models.Model):
    class Meta:
        verbose_name = "ATM Refill"
        verbose_name_plural = "ATM Refills"
    #Atm_machine_refill_ id = self.id | is defualt built into the Model
    ATM_ID = models.ForeignKey('ATM', on_delete = models.PROTECT)
    amount = models.DecimalField(max_digits=20, decimal_places = 2)
    refill_date = models.DateField(null = True) #, auto_now_add = True)
    #TODO: get value of blanace from the atm that is in another table
    #previous_balance =

    def __self__(self):
        return "Refill ID: " + str(self.id) + " | date: " + str(self.refill_date)



'''
Transaction class
The primary key is a unique ID generated by the database
As with ATM refill, this provides historical data
'''
class Transaction(models.Model):
    class Meta:
        verbose_name = "Transaction"
        verbose_name_plural = "Transactions"
    #transaction id = self.id | is default built into the model
    card_ID = models.ForeignKey('Add_New_ATM_Card', on_delete = models.PROTECT)
    time = models.DateTimeField(null = True)
    ATM_ID = models.ForeignKey('ATM', on_delete = models.PROTECT)

    status_choices = [ ("Complete","Complete") , ("Incomplete","Incomplete") ]
    status = models.CharField(max_length = 10, default = "Incomplete", choices = status_choices)

    response_code = models.CharField(max_length = 4)

    # add typs of transactions here
    transaction_choices = [ ("NA","NA") , ("Phone Change","Phone Change") , ("Pin Change","Pin Change") , ("Cash Withdrawal", "Cash Withdrawal") , ("Cash Trasnsfer","Cash Trasnsfer") , ("Balance Enquiry","Balance Enquiry")]
    transaction_type = models.CharField(max_length = 15, default = "NA", choices = transaction_choices)

    def __self__(self):
        return "Transaction ID: " + str(self.id) + " | date: " + str(self.date) + " | time: " + str(self.time)
